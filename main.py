import asyncio
from os import getenv
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InputFile, FSInputFile, URLInputFile
from dotenv import load_dotenv
from database.models import async_main
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.db_requests import *

from keyboards.inline_kb import *
from keyboards.replay_kb import *


load_dotenv()
TOKEN = getenv('TOKEN')

dp = Dispatcher()
bot = Bot(TOKEN)

class Kalorii(StatesGroup):
    age = State()
    weight = State()
    height = State()





@dp.message(CommandStart())
async def cmd_start_reg(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –°—Ç–∞—Ä—Ç"""

    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}!\n–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –í–∞—à –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ .')
    await start_register_user(message)


async def start_register_user(message: Message):
    """–§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    chat_id = message.chat.id
    fullname = message.from_user.full_name
    if await reg_user(chat_id, fullname):
        await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã', reply_markup=kb_main_menu)
    else:
        await message.answer('–í—ã –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã', reply_markup=kb_main_menu)


"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é  –•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å!üèÉ‚Äç + FSM –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–±–∂—É –∏ –∑–∞–Ω–µ—Å–µ–Ω–∏—è –≤ –ë–î"""

@dp.message(F.text == '–•–æ—á—É –ø–æ—Ö—É–¥–µ—Ç—å!üèÉ‚Äç‚ôÄÔ∏è')
async def to_lose_weight(message: Message, state: FSMContext):
    users = await check_user_kbju(message.chat.id)
    if users.kbju != None:
        await message.answer(f'–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–±–∂—É –¥–ª—è –≤–∞—Å:{users.kbju}', reply_markup=kb_category)
    else:
        await state.set_state(Kalorii.age)  # –£—Å—Ç–æ–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
        await message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–æ—Ö—É–¥–µ–Ω–∏—è, –¥–ª—è –Ω–∞—á–∞–ª–æ —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –≤–∞—à–µ —Å—É—Ç–æ—á–Ω–æ–µ –∫–±–∂—É!')
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç)!')

@dp.message(Kalorii.age)
async def kbju_1(message: Message, state: FSMContext):
    await state.update_data(age=int(message.text))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await state.set_state(Kalorii.weight)  # –£—Å—Ç–æ–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –≤–µ—Å–∞
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≤–µ—Å –≤ –∫–≥!')

@dp.message(Kalorii.weight)
async def kbju_2(message: Message, state: FSMContext):
    await state.update_data(weight=int(message.text))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await state.set_state(Kalorii.height)  # –£—Å—Ç–æ–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ —Ä–æ—Å—Ç –≤ —Å–º!')

@dp.message(Kalorii.height)
async def kbju_2(message: Message, state: FSMContext):
    await state.update_data(height=int(message.text))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    data = await state.get_data() # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é data –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
    chat_id = message.chat.id
    await calorie_calculation(chat_id, data['age'], data['weight'], data['height'])
    await message.answer(f'–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–±–∂—É –¥–ª—è –≤–∞—Å:{(10*data["weight"]+6.25*data["height"]-5*data["age"]+5)}', reply_markup=kb_category)
    await state.clear()



@dp.message(F.text == '–ü–∏—Ç–∞–Ω–∏–µ –Ω–∞ 7 –¥–Ω–µ–π!ü•ë')
async def get_foods(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–∏—Ç–∞–Ω–∏–µ –Ω–∞ 7 –¥–Ω–µ–π!ü•ë """

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=await categories_food())



@dp.message(F.text == '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ 7 –¥–Ω–µ–πüèãÔ∏è‚Äç‚ôÇÔ∏è')
async def get_gyms(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ 7 –¥–Ω–µ–π!ü•ë """

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=await categories_gym())


@dp.message(F.text == '‚¨Ö –ù–∞–∑–∞–¥')
async def return_main_menu(message: Message):
    """–û–±—Ä–æ–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    chat_id = message.chat.id
    message_id = message.message_id

    await bot.delete_message(chat_id=chat_id,
                             message_id=message_id)
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–∫–Ω—Ç –º–µ–Ω—é', reply_markup=kb_main_menu)





@dp.callback_query(F.data.startswith('cat_food_')) #–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ cat_food_
async def category_product(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ–¥—ã!ü•ë """
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ')
    await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=await products(callback.data.split('_')[2]))


@dp.callback_query(F.data == 'return_to_category_food')
async def return_to_category_food_button(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º!')
    await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=await categories_food())


@dp.callback_query(F.data.startswith('cat_gym_')) #–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ cat_food_
async def category_exercise(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ """
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ')
    await bot.edit_message_text('–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=await exercises(callback.data.split('_')[2]))


@dp.callback_query(F.data == 'return_to_category_gym')
async def return_to_category_gym_button(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é"""
    chat_id = callback.message.chat.id
    message_id = callback.message.message_id
    await callback.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º!')
    await bot.edit_message_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é',
                                chat_id=chat_id,
                                message_id=message_id,
                                reply_markup=await categories_gym())


@dp.callback_query(F.data.startswith('product_'))
async def product(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ–¥—ã!ü•ë """
    chat_id = callback.from_user.id
    message_id = callback.message.message_id
    products_data = await get_products(callback.data.split('_')[1])

    await bot.delete_message(chat_id=chat_id,
                             message_id=message_id)
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –±–ª—é–¥–æ!')
    await callback.message.answer_photo(photo=FSInputFile(path=products_data.image_path,),
                                        caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ:{products_data.name_foods}\n–û–ø–∏—Å–∞–Ω–∏–µ:{products_data.discription_foods}\n', reply_markup=kb_category)




@dp.callback_query(F.data.startswith('exercise_'))
async def product(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ–¥—ã!ü•ë """
    chat_id = callback.from_user.id
    message_id = callback.message.message_id
    exercise_data = await get_exercise(callback.data.split('_')[1])

    await bot.delete_message(chat_id=chat_id,
                             message_id=message_id)
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!')
    await callback.message.answer(f'–ù–∞–∑–≤–∞–Ω–∏–µ:{exercise_data.name_gyms}\n –û–ø–∏—Å–∞–Ω–∏–µ:{exercise_data.discription_gyms}\n')
    await callback.message.answer(exercise_data.video_path, reply_markup=kb_category)


@dp.message(F.text == '–ù–æ—Ä–º–∞ –≤–æ–¥—ã –Ω–∞ 7 –¥–Ω–µ–πüç∫')
async def get_water_norm(message: Message):
    """–û—Ç–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–æ—Ä–º—É –≤–æ–¥—ã"""

    chat_id = message.from_user.id
    message_id = message.message_id
    await message.answer('–í–∞—à–∞ —Å—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã 1.5 –ª üíß', reply_markup=inl_kb_water_norm)



@dp.callback_query(F.data == 'drank')
async def reaction_on_drank(callback: CallbackQuery):
    """–û—Ç–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–∫–æ–ª—å–∫–æ –æ–Ω –≤—ã–ø–∏–ª –∑–∞ –Ω–µ–¥–µ–ª—é """
    chat_id = callback.from_user.id
    message_id = callback.message.message_id
    await db_get_water_norm(chat_id)

    # await bot.delete_message(chat_id=chat_id,
    #                          message_id=message_id)
    # await callback.answer(f'–í—ã –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü!{water_norm_data.user_id}')





async def main():
    await async_main()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

